#! /bin/sh
# Copyright (C) 2021, 2022  Otto Jung
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION=1.2

####################
# Helper functions #
####################

yell() {
	echo "$*" 1>&2
}

fatal() {
	yell "ERROR: $*"
	exit 1
}

error() {
	if test "$KEEP_GOING" = "0"
	then fatal "$*"
	else test "$MODE" = "check" || yell "IGNORED: $*"
	fi
}

show_help() {
	yell "$0 is a dotfiles deployment script, a very simple version of 'stow'"
	yell "Usage: $0 [OPTS...] run    <SOURCE> <TARGET>"
	yell "       $0 [OPTS...] dryrun <SOURCE> <TARGET>"
	yell "       $0 [OPTS...] check  <SOURCE> <TARGET>"
	yell "       $0 -v"
	yell ""
	yell "OPTS:  --overwrite | --no-overwrite |"
	yell "       --safe | --unsafe |"
	yell "       --quiet | --verbose |"
	yell "       --readlink | --no-readlink |"
	yell "       --keep-going | --no-keep-going"
	yell ""
	yell "Defaults are --safe, --no-overwrite, --verbose, --readlink, and --no-keep-going."
	yell ""
	yell "Note that --no-overwrite implies --readlink."
	yell ""
	yell "To do a cleanup (uninstall), make use of STOWY_LINK_CMD variable, like so:"
	yell "  STOWY_LINK_CMD=remove-command ./stowy --overwrite ..."
	yell "where the 'remove-command' is a program like 'link-cmds/remove.sh'"
}

require() {
	PROGRAM="$1"
	shift

	if ! command -v "$PROGRAM" 1>/dev/null 2>/dev/null
	then fatal "'$PROGRAM' is required $*"
	fi
}

my_pushd() {
	if test -d "$SOURCE/$STACK/$1"
	then
		if test -z "$STACK"
		then STACK="$1"
		else STACK="$STACK/$1"
		fi
		STACK=$(echo "$STACK" | tr -s "/")
	else
		return $?
	fi
}

my_popd() {
	STACK=$(echo "$STACK" | tr -s '/' | tr '/' '\n' | head -n -1 | tr '\n' '/' | tr -s '/')
	case "$STACK" in
		*/) STACK=${STACK%?} ;;
	esac
}

####################
# Argument parsing #
####################

OVERWRITE=0
VERBOSITY=1
READLINK=1
SAFE=1
KEEP_GOING=0

while true
do
	OPT="$1"
	case "$OPT" in
		-v)
			echo "$VERSION"
			exit 1
			;;
		--version)
			echo "$VERSION"
			exit 1
			;;
		--overwrite)
			OVERWRITE=1
			;;
		--no-overwrite)
			OVERWRITE=0
			READLINK=1
			;;
		--safe)
			SAFE=1
			;;
		--unsafe)
			SAFE=0
			;;
		--quiet)
			VERBOSITY=0
			;;
		--verbose)
			VERBOSITY=1
			;;
		--readlink)
			READLINK=1
			;;
		--no-readlink)
			READLINK=0
			;;
		--keep-going)
			KEEP_GOING=1
			;;
		--no-keep-going)
			KEEP_GOING=0
			;;
		run)
			SOURCE="$2"
			TARGET="$3"
			MODE=run
			break
			;;
		dryrun)
			SOURCE="$2"
			TARGET="$3"
			MODE=dryrun
			break
			;;
		check)
			SOURCE="$2"
			TARGET="$3"
			MODE=check
			break
			;;
		*)
			show_help
			exit 1
			;;
	esac
	shift
done

if ! test -d "$SOURCE"
then
	show_help
	fatal "Source '$SOURCE' should be a directory, but is not"
fi

if ! test -d "$TARGET"
then
	show_help
	fatal "Target '$TARGET' should be a directory, but is not"
fi

if test "$OVERWRITE" = 0 && test "$READLINK" = 0
then
	fatal "Flag --no-readlink can only be used together with --overwrite"
fi

###############
# Preparation #
###############

require ls to list files
require tr to handle internal stack
require head to handle internal stack

if test "$OVERWRITE" = 0
then require readlink to inspect symlinks
fi

if test "$READLINK" = 1
then require readlink to inspect symlinks
fi

if test -n "$STOWY_LINK_CMD"
then LINK_CMD="$STOWY_LINK_CMD"
else
	LINK_CMD="ln -srf"
	require ln to make symlinks
fi

################
# Installation #
################

my_link() {
	SRC=$(echo "$SOURCE/$STACK/$1" | tr -s "/")
	TGT=$(echo "$TARGET/$STACK/$1" | tr -s "/")

	if test "$OVERWRITE" = 0 && test -e "$TGT"
	then
		if test $(readlink -f "$TGT" || echo "///") = $(readlink -f "$SRC" || echo "//")
		then return 0
		else
			 error "Want to replace file '$(readlink -f "$SRC" || echo "///")' by '$(readlink -f "$TGT" || echo "//")', but that is only allowed with --overwrite flag"
			 return 1
		fi
	fi

	if ! test "$VERBOSITY" = 0 && ! test "$MODE" = "check"
	then yell $LINK_CMD "$SRC" "$TGT"
	fi

	if test "$MODE" = "run"
	then $LINK_CMD "$SRC" "$TGT" || error "Link failed"
	fi
}

my_install_push() {
	if test "$READLINK" = 1 && test $(readlink -f "$SOURCE/$STACK/$1" || echo "///") = $(readlink -f "$TARGET/$STACK/$1" || echo "//")
	then
		test "$OVERWRITE" = 1 && test -n "$STOWY_LINK_CMD" && my_link "."
		return
	fi

	my_pushd "$1"
	my_install
	my_popd
}

my_install() {
	ls -a "$SOURCE/$STACK/" | while IFS= read -r FILE
	do
		if test "$FILE" = "." || test "$FILE" = ".."
		then continue
		fi

		FULLNAME="$STACK/$FILE"
		if test -d "$SOURCE/$FULLNAME"
		then
			if test -d "$TARGET/$FULLNAME"
			then my_install_push "$FILE"
			elif test -e "$TARGET/$FULLNAME" && test "$SAFE" = 1
			then error "Want to place directory '$FULLNAME' in '$TARGET', but there is something else there!"
			else my_link "$FILE"
			fi
		elif test -f "$SOURCE/$FULLNAME"
		then
			if test -e "$TARGET/$FULLNAME" && ! test -f "$TARGET/$FULLNAME" && test "$SAFE" = 1
			then error "Want to place file '$FULLNAME' in '$TARGET', but there is something else there!"
			else my_link "$FILE"
			fi
		else
			yell "WARN: Skipping irregular file '$SOURCE/$FULLNAME'"
		fi
	done
}

#############
# Execution #
#############

case "$MODE" in
	dryrun)
		my_install
		;;
	check)
		my_install
		;;
	run)
		MODE=check
		my_install
		MODE=run
		my_install
		;;
esac
